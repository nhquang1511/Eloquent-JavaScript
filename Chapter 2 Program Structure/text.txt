------------program structure-----------
in this chapter, we will start to do things that can actually be called programming. we will expand our command of the javaScript language beyond the nouns and sentence fragment we've seen so far so to the point where we can express meaning porse.
--------------expressions and statements----------
in chapter 1, we made values and applied operators to them to get new value.Creating values like this is the main substance of any javaScript program. but that substance has to be framed in a larger structure to be useful. that's what we'll cover in this chapter.
a fragment of code that produces a value in called an expression. every value that is written literal (such as 22 or "psychoanalysis") is an expression. an expression between parentheses is also an expression, as is a binary opretator applied to two expression or a unary operator applied one.
this shows part of the beaty of a language-based interface. expressions can contain other expression in a way similar to how subsentenses in human language as nested- a subsentence can contain its own subsentences, and so on. this allows us to build expressions that describe arbitrarily complex computations.
if an expression corresponds to a sentence fragment, a javaScript statement corresponds to a full sentence. a program is list of statements.
this simplest kind of statement is an expression is an expression with a semicolon after it. this is program:
1;
!false;

it is a useless program, thought. An expression can be content to just produce a value, which can then be used by the enclosing code. however a statement stands on its own,
so if doesn't affect the world, it's useless. it may display something on the screen, as with console.log, or change the state of the machine in a way that will affect the statements that come after it. these changes are called side effect. the statements in the previous example just produce the values 1 adn true and then immediately throw them away. this leaves no impression on the world at all. when you run this program, nothing observable happens.
in some cases, javaScript allows you to omit the semicolon at the end of a statement. in other cases, it has to be there, or the next line will be treated as part of the same statement. the rules for when it can be safely omited are somewhat complex and error prone. so in this book, every statement that needs a semicolon will always get one. i recommend you do the same, at least until you've learned more about the subtleties of missing semicolons.
---------------Bindings----------------
how does a program keep an internal state? how does it remember things? we have seen how to produce new values from old values, but this does not change the old values, and the new value must be used  immediately or it will dissipate again. to catch and hold values, javaScript provides a thing called a binding, or variable.

let caught = 5 * 5;

that gives us a second kind of statement. the special word (keyword) let indicates that this sentence is going to define a binding. it is followed by the name of the binding and, if we want to immediately give it a value, by an = operator and an expression.
the example create a binding call caught and uses it to grab hold of the number that is produced by multiplying 5 by 5.
after a bindings has been defined, its name can be used as an expression. the value of such an expression is the value the binding currently holds. here's an example:

let ten = 10;
console.log(ten*ten)
// 100

when a binding points at a value, that dose not mean it is tied to that value forever. the = operator can be used at any time on existing bindings to disconnect them from their current value and have them point to a new one:

let mood = "light";
console.log(mood); // → light mood = "dark"; console.log(mood); // → dark

you should imagine binding as tentacles rather than boxes. they do not contain valuesl they grasp them- two binding can refer to the same value. a program can access only the values to which it still has a reference. when you need to remember something, you either grow a tentacle to hole on to it or reattach one of your existing tentacle to it.
let look at another example. to remember the number of dollars that luigi still owes you, you create a binding.when he pays back $35, you give this binding a new value.

let l = 140;
l = l-35;
console.log(l);
//105

when you define a binding without giving it a value, the tentacle has nothing to grasp, so it ends in thin air. if you ask for the value of an empty binding, you'll get the value undefined.

a single let statement may define multiple bindings, the definitions must be separated by commas:

let one = 1, two = 2;

the words var and const can alse be used to create bidings, in similar fashion to le.

the first of these, var(short for "variable"), is the way binding were declared in pre-2015 javaScript, when let didn't exits yet. i'll get back to the precise way it differ from let in the next chapter. for now, remember that it mostly does the same thing, but we'll rarely use it in this book because it behaves oddly in some situations.
the word const stands for constant. it defines a constant binding, which points at the same value fo as long as it lives.this is useful for bindings that just give a name to a value so that you can easily refer to it later.

--------------------binding names---------
binding names can be any sequence of one or more letters. digits can be part of binding names-catch22 is a valid name, for example-but the name must not start with a digit. a binding name may include dollar signs($) or underscores_  but no other punctuation or special character.
words with a special meaning, such as let, are keyword, and may not be used as binding names. there are also a number of words that are "reserved for use" in future version of javaScript, which alse can't be used as biding names. the full list of keyword and reserved words is rather long:

don't worry about memorizing thist list. when creating a binding produces an unexpected syntax error, check whether you're trying to define a reserved word.

---------------the environment-----------------
the collection of bindings and their values that exist at a given time called the environment. when a program starts up, this environment is not empty. it always contains bindings that are part of the language standard, and most of the time, it also has binding that provide ways to interact with the surrounding system. for example , in a browser, there are functions to interact with the current current loaded website and to read mouse and keyboard input.
-----------------------funtions-------------
a lot of the values provided in the default environment have the type function.
a function is a piece of program wrapped in a value. such values can be applied in order to run the wrapped program. for example, in a browser environment, the binding prompt holds a function that shows a little dialog asking for user input.it is used like this.
executing a funtion is called invoking, calling, or applying it. you can call a funtion by puting parentheses afeter an expression that produces a funtion value.
usually you'll directly use the name of the binding that holds the funtion. in the example, the prompt function uses the string that we give it as the text to show in the dialog box. values given to funtions are called arguments. different function might need a different number or different types of arguments.
the prompt funtion isn't used much in modern web programming, mostly because you have no control over the way the resulting dialog looks, but it can be helpful in toy programs and experiments.

------------the console.log funtion-----------
in the example, i used console.log to output value. most javaScript systems(including all modern web browser and node.js) provide a console.log function that writes out its arguments to some text output device. in browsers, the output lands in the javaScript console. this part of the browser interface is hidden by default, but most browser open it when you press f12 or, on a mac, commend-option-i. if that does not work, search through the menus for an item naemd developer tools or similar.
though binding names cannot contain period character, console.log does have one.this is because console.log isn't a simple binding, but an  expression that retrieves the log property from the value held by the console binding. we'll find out exactly what is this means in chapter 4.
---------------------return values-------------
showing a dialog box or writing text to the screen is a side effect.many function are useful because fo the side effects they produce. functions may also produce values, in which case they don't need to have a side effect to be useful. for example, the function math.max takes any amount of number arguments and gives back the greatest.
console.log(Math.max(2,5));
//5

when a function produces a value, it is said to return that value. anything that prodces a value is an expression in javaScript.which means that function calls can be used within larger expression. in the following code , a call to math.minm which is the opposite of math.max is used as part of a plus expression:
chapter 3 will explain how to write your own funtions.

-------------------control flow---------------
when your program contains more than one statement, the statement are executed as though they were a story. from top to bottom. for example, the following prgram has two statement. the first asks the user for a number, and the second, which is executed after the firts, shows the sequare of that number:
let theNumber = Number(prompt("Pick a number")); console.log("Your number is the square root of " + theNumber * theNumber)

the function number converts a value to a number. we need that conversion because the result of prompt is a string value, and we want a number. there are similar function called String and boolean that convert values to those types.

here is the rather trivial schematic representation of straight-line control flow:

---------------------Conditional execution-------------
not all program are straight roads. we may, for example, want to create a branching road where the program takes the proper branch based on the situation at hand. this is called Conditional execution.

Conditional execution is created with the if keyword in javaScript. in the simple case, we want some code to be executed if, and only if, a certain condition holds. we might, for example, want to show the square of the input only if the input is actually a number:

let theNumber = Number(prompt("Pick a number")); if (!Number.isNaN(theNumber)) { console.log("Your number is the square root of " + theNumber * theNumber); }

with this modification, if you enter "parrot" no output is shown. 
the if keyword executes or skips a statement depending on the value of a boolean expression. the deciding expression is written after the keyword, between parentheses, followed by the statement to execute.
the number.isNaN function is a standard javaScript function that return true only if the argument it is given is NaN. the number function happens to return NaN when you give it a string that doesn't represent a valid number.
thus, the condition translates to "unless the number is not a number, do this"
the statement after the if is wrapped in braces ({}) in this example. the braces can be used to group any number of statement into a single statement, called a block. you could also have omitted them in this case, sice they hold only a single statement, but to avoid having to think about whether they are needed, most javaScript programming use them in every wrapped statement like this.we'll most follow that conversion in this book, except for the occational one-liner.
if (1 + 1 == 2) console.log("It's true"); // → It's true

you often won't just have code that executes when a condition holds true, but also code that handles the other case. this alternate path is represent by the second arrow two separate, alternative execution paths:

if you have more than two paths to choose from you can "chian" multiple if/else pairs together. here's an example;

the program will first check whether num is less than 10. if it is, it chooses that branch, shows "small", and is done. if it isn't, it takes the else branch, which itself contain a second if. if the second condition (< 100) holds that means the number is at least 10 but below 100, and "meidum" is shown, if it doesn't, the second and last else branch is chosen.

the schema for this program looks something like this:

-----------------------while and do loops------
consider a program that outputs all even numbers from 0 to 12. one way to write this is as follows:

console.log(0);
console.log(0); console.log(2); console.log(4); console.log(6); console.log(8); console.log(10); console.log(12);
that works, but the idea of writing a program is to make something less work, not more. if needed all even numbers less then 1,000, this approach would be unworkable. what we need is a way to run a piece of code multiple times. this form of control flow is called a loop.

looping control flow allows us to go hack to some point in the program where we were before and repeat it with our current program state. if we combine this with a binding that counts, we can do somgthing like this:

let number = 0;
while (number <=12){
    console.log(number)
    number = number + 2;
}
// 0
// 2

a statement starting with the keyword while create a loop. the word while is followed by an expression in parentheses and then a statement, much like if. the loop keeps entering that statement as long as the expression produces a value that gives true when converted to boolean.
the number binding demostrates the way a binding can track the progress of a program. every time the loop repeats, number gets a value that is 2 more than its previous value. at the beginning of every repetition, it is compared with the number 12 to decide whether the program's work is finished.

as an example that actually does something useful, we can now write a program that calculates and shows the value of . we use two binding: one to keep track of our result and one to count how often we have multiple this result by 2. the loop tests whether the second binding has reached 10 yet and, if not, updates both biding.

the counter could also have started at 1 and checked for <= 10, but for reasons that will become apprent in chapter 4, it is a good idea to get used to counting from 0.
note that javaScript also has an operator for exponentiation (2**10), which you would use to compute this in real code - but that would hava ruined the example.

a do loop is control structure similar to a while loop. it differ onle on one point: a do loop always executes its body at least once, and it starts testing whether it should stop only after that first execution. to reflect this, the test appears after the body of the loop:

this program will force you to enter a name, it will ask again and again until it gets something that is not an empty stirng. applying the ! operator will convert a vaule to boolean type before negating it, and all string except "" convert to true. this means the loop continues going round until you provide a non-empty name.

------------------indenting code -----------
in the example, i've been adding spaces in front of statements that are part of some larger statement. these spaces are not required-the computer will accept the program just fine without them. in fact, even the line breaks in programs are optional.you could write a program as a single long line if you felt like it.
the role of this indentation inside blocks is to make the structure of the code stand out to human readers.
in code where new blocks are opened inside other blocks, it can become hard to see where one block ends and another begins.
with proper indentation, the visual shape of a program corresponds to the shape of the locks inside it. i like to use two spaces for every open block, but tastes differ-some people use four spaces, and some people use tab character. the important thing is that each new block adds the same amount of space.
Most code editor programs will help by automatically indenting new lines the proper amount.

---------------for loops -----------------
many loops follow the pattern shown in the while example. first a "counter" biding is created to track the progress of the loop. then comes a while loop, usually with a test expression that checks whether the counter has reached ist end value. at the end of the loop body, the counter is updated to track progress. 
because this pattern is so common. javaScript and similar language provide a slightly shorter and more comprehensive form, the for loop:

this program is exactly equivalent to the earlier even-number-printing example. the only change is that all the statement that are related to the "state" of the loop are grouped together after for.
the parentheses after a for keyword must contain two semicolons. the part before the firts semicolon initializes the loop, usually by defining a biding. the second part is the expression that checks whether the loop must continue. the final part updates the state of the loop after every iteration. in most cases. this is shorted and clearer than a while construct.
this is  the code that computer 2^10 using instead of while:

====================breaking out of a loop-=======
having the looping condition produce false is not the only way a loop can finish. the break statement has the effect of immediately jumping out of the enclosing loop.its use is demostrated in the following program, which finds the first number that is both greater than or equal to 20 and divisible by 7:

using the remainder(%) operator is an easy way to test whether a number is divisible by another number. if it is, the remainder of theri division is zero.
the for construct in the example dose not have a part that checks for the end of the loop. this means that the loop will never stop unless the break statement inside is executed.
if you were to remove that break statement or you accidentally write an end condition that always produces true, your program would get stuck in an infinite loop. A program stuck in an infinite loop will never finish running, which is usually a bad thing.

the continue keyword is similar to break in that in influences the progress of a loop, when continue is encountered in a loop body, control jumps out of the body and continues with the loop's next iteration.

------------------------updating bindings succinctly---
especially when looping, a program often needs to "update" a binding to hole a value based on that binding's previous value.
counter = counter +1;

javaScript provides a shortcut for this:

counter+=1;

similar shorcuts work for many other operator, such as result*=2 to double result or counter-=1 to count downward.

this allows us to further shorten out counting example.
for counter +=1 and counter -=1, there are even shorter equivalent: counter ++ and counter--.

===========dispatching on a value with switch==========
it is not uncommon for code to look like this:
there is a construct called switch that is intended to express such a "dispath" in a more direct way. unfortunately, the syntax javaScript uses for this( which it inherited from the c/java line of programing language) is somewhat awkward-a chain of if statements may look better. here is an example:

you may put any number of case labels inside the block opened by switch. the program will start executing at the label that corresponds to the value that switch was given, or at default if no matching value is found. it will continue executing, even across other lables, until it reaches a break statement. in some cases, such as the "sunny" case in the example, this can be used to share some code between cases(it recommend going outside for both sunny and cloudy weather). be careful, thought-it is easy to forget such a break, which will cause the program to execute code you do not want executed.
============capitalization=============
binding names may not contain spaces, yet it is open helpful to use multiple words to clearly describe what the binding represents. these are pretty much your choices for writing a binding name with several words in it:

the first style can be hard to read. i rather like the look of the underscores, though that style is a little painful to type. the standard javaScript functions, and most javaScript programmers, follow the final stye- they capitalize every word except the first. it is not hard to get used to little thing like that, and code with mixed naming styles can be jarring to read, so we follow this convention.
in a few cases, such as the number function, the first letter of a biding is also capitalize. this was done to mark this function as a constructor. it will become clear what a constructor is in chapter 6. for now the important thing is to not be bothered by this apparent lack of consitency.

-----------comment-------------------
often raw code dose not convey all the information you want a program to convey to human readers, or it conveys it in such a cryptic way that people might not understand is. at other times, you might just want to include some related thoughts as part of your program. this is what comments are for.

a computer is a piece of text that is part of a program but is completety ignored by the computer. javaScript has two ways of writing comments, to write a single-line commend, you can use two slash character // and then the comment text after it:

a // comment goes only to the end of the line. a section of text between /* and */ will be ignored in its entirety, regradless of whether it constains line breaks, this is useful for adding blocks of information about a file or a chunk of program:

-------------------summary-------------
you now know that a program is built out of statements, which themselves sometimes contain more statements. statements tend to contain expression, which themselves can be build out of smaller expressions.
putting statements after one another gives you a program that is executed from top to bottom. you can introduce disturbances in the flow of control by using conditional (if, else, and switch) and looping ( while, do and for) statement.
binding can be used to file piece of data under a name, and they are useful for tracking state in your program. the environment is the set of bindings that are defined. javaScript systems always put a number of useful standard binding into your environment.

function are special values that encapsulate a piece of program. you can invoke them by writing function(ar1,ar2). such as function call is an expression and may produce a value.

---------------------end chapter 2---------------------
------------------------exercises-----------------------



