This is a book about instructing computers. Computers are about as common as screwdrivers today, but they are (quite a bit) more complex and making them do what you want them to do isn't always easy.
If the task you have for your computer is a common, well-understood one, such as showing you your email or acting like calculator, you can open the appropriate application and get to work. But for unique or open-ended tasks, there often is no appropriate application
That is where programming may come in. Programming is the act of contructing a program-a set of precise instructions telling a computer what to do.
Fortunately, if you can get over that fact-and maybe even enjoy the rigor of thinking in terms that dumb machines can deal with-programing can be rewarding. It allows you to do things in seconds that would take forever by hand. It is a way to make your computer tool do things that is couldn't do before. On top of that, it makes for a wonderful game of puzzle solving and abstract thinking.
Most programming is done with programming languages. A programming language is an artificially constructed language used to instruct computers. It is interesting that the most effective way we've found to communicate with a computer borrows so heavily from the way communicate with each other.
like human languages, computer languages allow words and phrases to be combined in new ways, making it possible to express ever new concept.
at one point, language-based interfaces, such as the BASIC and DOS prompts of the 1980s and 1990s, were the main method of interacting with computers. for routine computer use, these havea largely been replaced with visual interfaces, which are easier to learn but offer less freedom. but if you know where to look, the languages are still there. One of them javaScript, is built into every modern web browser-and is thus available on almost every device.
this book will try to make you familar enought with this language to do useful and amusing thing with it.

----------------On programing---------------------
besides explaining javascrit, i will introduce the basic principles of programming, programming, it turns out, is hard.. the fundamental rules are simple and clear, but programs built on top of these rules tend to become complex enought to intrudce their own rules and complexity. You're building your own maze, in a way and you can easily get lost in it.
there will be times when reading this book feels terribly frustrating. if you are new to programming, there will be a lot new material to digest. Much of this material will then be combined in ways that require you to make additional connnections.
it is up to you make the necessary effort. when you are struggling to follow the book, do not jump to any conclusions about your own capabilities.
you are fine-you just need to keep at it. take a break, reread some material, and make sure you read and understand the example programs and exercises.
learning is hard work, but everything you learn is your and will makr further laerning easier
when action grows unprofitable, gather information; when information grows unprofitable, sleep

a program is many things. it is a piece of text typed by programmer, it is the directing force that makes the computer do what is does, it is data in the computer's memory, and at the same time, it controls the actions performed on this memory. Analogies that try to compare programs to familar objects tend to fall short. a superficially fitting one is to compare a program to a machine- lots of separate parts tend to be involed, and to make the whole thing tick, we have to consider the ways in which these parts onterconnect and contribute to the operation of the whole
a computer is a physical machine that acts as host for these immaterial machines. computers themselves can do only stupidly straighforward things.
the reason they are so use ful is that they do these things at an incredibly high speed. a program can ingeniously combine an enormous number of these simple actions to do very complicated things.
a program is a building of thought. it is costless to build, it is weighless, and it grows easily under our typing hands. but as program grows, so does its comlexity.
the skill of programming is the skill of building programs that don't confuse the programmer.
the best programs are those that manage to do something interesting while still being easy to understand.

some programmers believe that this complexity is best managed by using onle a small set of well-understood techniques in their programs. they have composed strict rules("best practices") prescribing the form programs should have and carefully stay within their safe little zone.
this is not only boring-it is ineffective. new problems often require new solutions. the field of programming is young and still developing rapidlly, and it is varied enought to have room for wildly different approaches. there are many terrible mistaks to make in program design,
adn you should go ahead and make them at least once so that understand them. A sense of what a good prgram look like is developed with practice, not learned from a list of rules.

----------------why language matters--------------
in the beginning, at the birth of computing, there were no programming language. programs looked something like this:
0011001 000000 00000000
1100000 101000 00101000

this is a program to add the numbers from 1 to 10 together and print the result: 1 + 2+ ... 10 = 55. it could run on a sumple hypothetical machine.
to program early computers, it was necessary to set large arrays of switches in the right position or punch holes in strips of cardboard and feed them to the computer. you can imagine how tedious and error prone this procedure was. even writing simple programs required much cleverness and discipline.
complexx ones were nearly inconceivable.
of cource manually entering these arcane patterns of bits(the one and zeros) did give the programmer a profound sense of being a mighty wizard. and that has to be worth something in terms of job satisfaction.
each line of the previous program contains a single instruction. it could be written in english liks this:\
1 store the number 0 in memory location 0.
2 store the number 1 in memory location 1
3 store the value of memory location 1 in memory location 2
4 subtract the number 11 from the value in memory location2
5 if the value in memory location 2 is the number 0, continue with instruction 9
6 add the value of memory location 1 to memory location 0
7 add the number 1 to the value of memory location 1
8 continue with instrution 3
9 output the value of memory location 0.
althought that is already more readble than the soup of bits, it is still rather obscure, using name instead of numbers for the instructions and memory location helps.
set "total" to 0 
set "count" to 1
[loop]
set "compart" to "count"
subtract 11 from "compare"
if "compare" is 0, continue at [end].
add "count" to "total"
add 1 to "count"
continue at [loop].
[end]
output "total"
can you see how the program works at this point? the first two lines give to memory location their starting values: total will be used to build up the result of the computation, and count will keep track of the number that we are currently looking at. the lines using compare are probaly the most confusing ones. the program wants to see whether count is equal to 11 to decide whther it can stop runnning. because our hypothetical machine is rather primitive, it can test only whether a number is zero and make a decision based on that.it therefore uses the memory location labeled compare to compute the value of count --11 and makes a decision based on that value. the next two lines add the value of count to the result and increment count by 1 every time the program decides that count is not 11 yet.
here is the same program in javasrcipt:

this version gives us a few more improvement. most importantly, there is no need to specify the way we want the program to jump back and forth anymore-the while construct takes care of that. it continues executing the block(wrapped in braces) below it as long as the condition is was given holds.
that condition is count <= 10, which means "the count is less than or equal to 10". we no longer have to create a temporary value and compare that to zero, which was just an uninteresting detail. prat of the power of programing language is that they can take care of uninteresting details fo us.
at the end of the program, after the while construct has finished, the console.log operation is used to write out the result.
finally, here is what the program could look like if we happened to have the convenient operation range and sum available which respectively create a collection of numbers within a range and compute the sum of a collection of numbers:

the moral of this story is that the same program can be expressed in both long and short, unreadable and readble ways. the first version of the program was extremely obscure, whereas this last one is almost enlish: log is the sum of the range of numbers from 1 to 10.(we will see in later chapters how to define operation like sum and range)
a good programing language hepls the programmer by allowing the to talk about the actions that the computer has to perform on a higher level.
it helps omit detail, provides convenient building blocks( such as while and console.log), allows you to define your own building blocks( such as sum and range), and makes those blocks easy to compose.


